# src/dashboard.py
import os
from pathlib import Path

import pandas as pd
import streamlit as st
from streamlit_autorefresh import st_autorefresh
from sqlalchemy.engine import make_url

from config.settings import settings
from dashboard.data import load_data
from dashboard.pages import (
    page_triage,
    page_analytics,
    page_config,
    page_bot_control,
)

# ---- helpers -------------------------------------------------------------
def _resolve_db_file(db_url: str) -> Path:
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î sqlite URL -> –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ë–î."""
    url = make_url(db_url)
    p = Path(url.database) if url.database else None
    if not p:
        return Path()  # –ø–æ—Ä–æ–∂–Ω—ñ–π —à–ª—è—Ö -> —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –±—É–¥–µ –Ω—É–ª—å–æ–≤–∞
    if not p.is_absolute():
        # <repo_root>/...  (src/dashboard.py -> <repo_root>)
        repo_root = Path(__file__).resolve().parents[1].parents[0]
        p = (repo_root / p).resolve()
    return p

def _db_signature(db_url: str) -> tuple:
    """
    –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –ë–î –¥–ª—è –∫–µ—à—É: (mtime,size) –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª—É + -wal/-shm, —è–∫—â–æ —î.
    –ó–º—ñ–Ω–∏–ª–∏—Å—å —Ñ–∞–π–ª–∏ -> –∑–º—ñ–Ω–∏–ª–∞—Å—å —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ -> –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è cache_data.
    """
    p = _resolve_db_file(db_url)
    files = [p, p.with_suffix(p.suffix + "-wal"), p.with_suffix(p.suffix + "-shm")]
    sig = []
    for f in files:
        if f and f.exists():
            s = f.stat()
            sig.append((int(s.st_mtime_ns), int(s.st_size)))
        else:
            sig.append((0, 0))
    return tuple(sig)
# -------------------------------------------------------------------------


def main():
    st.set_page_config(page_title="Lead Management Platform", page_icon="üöÄ", layout="wide")

    # –≥–ª–æ–±–∞–ª—å–Ω–∏–π –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à (–ø—ñ–¥–±–µ—Ä–∏ —ñ–Ω—Ç–µ—Ä–≤–∞–ª —è–∫ –∑—Ä—É—á–Ω–æ)
    st_autorefresh(interval=5_000, key="global_refresh")

    # --- 1) –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—é —Ç–∞–±–ª–∏—Ü—é opportunities –∑ –ë–î ---
    try:
        db_sig = _db_signature(settings.database.db_url)
        # –í–ê–ñ–õ–ò–í–û: load_data —Ç–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î (db_url, db_signature)
        df_full = load_data(settings.database.db_url, db_sig)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É: {e}")
        st.stop()

    # --- 2) –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å: –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è + —Ñ—ñ–ª—å—Ç—Ä–∏ ---
    with st.sidebar:
        st.title("Lead Gen Platform")
        page = st.radio(
            "–ù–∞–≤—ñ–≥–∞—Ü—ñ—è",
            ["üì¨ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è", "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", "‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è", "ü§ñ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ë–æ—Ç–æ–º"],
            label_visibility="collapsed",
        )
        st.divider()

        # –§—ñ–ª—å—Ç—Ä –∑–∞ –∞–∫–∞—É–Ω—Ç–æ–º
        if not df_full.empty and "bot_user_name" in df_full.columns:
            bots = df_full["bot_user_name"].dropna().unique().tolist()
            accounts_list = ["–í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏"] + sorted(bots)
        else:
            accounts_list = ["–í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏"]
        selected_account = st.selectbox("–ê–∫–∞—É–Ω—Ç –±–æ—Ç–∞", accounts_list)

        # –§—ñ–ª—å—Ç—Ä –∑–∞ –¥–∞—Ç–æ—é
        if not df_full.empty and "message_timestamp" in df_full.columns and df_full["message_timestamp"].notna().any():
            min_date = pd.to_datetime(df_full["message_timestamp"]).min().date()
            max_date = pd.to_datetime(df_full["message_timestamp"]).max().date()
        else:
            today = pd.Timestamp.utcnow().date()
            min_date = max_date = today

        selected_date_range = st.date_input(
            "–î—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
            [min_date, max_date],
            min_value=min_date,
            max_value=max_date,
        )

    # --- 3) –§—ñ–ª—å—Ç—Ä—É—î–º–æ DataFrame –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±–æ—Ä—É ---
    df = df_full.copy()
    if not df.empty and "message_timestamp" in df.columns:
        # –ø–æ –¥–∞—Ç–∞—Ö
        start = pd.to_datetime(selected_date_range[0]).tz_localize("UTC")
        end = pd.to_datetime(selected_date_range[1]).tz_localize("UTC").replace(hour=23, minute=59, second=59)
        df = df[(df["message_timestamp"] >= start) & (df["message_timestamp"] <= end)]

        # –ø–æ –∞–∫–∞—É–Ω—Ç—É
        if selected_account != "–í—Å—ñ –∞–∫–∞—É–Ω—Ç–∏" and "bot_user_name" in df.columns:
            df = df[df["bot_user_name"] == selected_account]

    # --- 4) –†–µ–Ω–¥–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞ –≤–∏–±–æ—Ä–æ–º ---
    if page == "üì¨ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è":
        page_triage.display_page(df)
    elif page == "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞":
        page_analytics.display_page(df)
    elif page == "‚öôÔ∏è –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è":
        config_path = Path(__file__).resolve().parents[1] / "config.yaml"
        page_config.display_page(config_path)
    else:  # "ü§ñ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –ë–æ—Ç–æ–º"
        page_bot_control.display_page(df_full)


if __name__ == "__main__":
    main()
