# src/dashboard/data.py
import streamlit as st
import pandas as pd
from sqlalchemy import create_engine, text
from sqlalchemy.engine import make_url
from pathlib import Path
from config.settings import settings


# --- –Ø–∫—ñ –∫–æ–ª–æ–Ω–∫–∏ –æ—á—ñ–∫—É—î –¥–∞—à–±–æ—Ä–¥ —É –≤—Å—ñ—Ö —Ç–∞–±–∞—Ö ---
_EXPECTED_COLS = [
    # –±–∞–∑–æ–≤—ñ
    "id", "message_timestamp", "created_at",
    "message_content", "message_url", "keyword_trigger",
    # –¥–∂–æ—ó–Ω–∏ (—ñ–º–µ–Ω–∞)
    "server_name", "channel_name", "author_name", "bot_user_name",
    # AI/—Ä—É—á–Ω—ñ
    "ai_stage_one_status", "ai_stage_two_status", "ai_stage_two_score",
    "manual_status",
]


def _empty_df() -> pd.DataFrame:
    """–ü–æ—Ä–æ–∂–Ω—ñ–π DF —ñ–∑ –ø–æ–≤–Ω–æ—é —Å—Ö–µ–º–æ—é, —â–æ–± UI –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–∞–¥–∞–≤."""
    df = pd.DataFrame(columns=_EXPECTED_COLS)
    # —Ç–∏–ø–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    df["ai_stage_two_score"] = pd.Series(dtype="float64")
    return df


def _ensure_columns(df: pd.DataFrame) -> pd.DataFrame:
    """–ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —É—Å—ñ—Ö –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫ + –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–Ω–∞—á–µ–Ω—å."""
    for c in _EXPECTED_COLS:
        if c not in df.columns:
            # —Ä–æ–∑—É–º–Ω—ñ –¥–µ—Ñ–æ–ª—Ç–∏
            if c == "ai_stage_two_score":
                df[c] = 0.0
            else:
                df[c] = ""

    # —á–∞—Å: message_timestamp (UTC) ‚Äî —è–∫—â–æ –Ω–µ–º–∞, –±–µ—Ä–µ–º–æ created_at
    if "message_timestamp" in df.columns and df["message_timestamp"].notna().any():
        df["message_timestamp"] = pd.to_datetime(df["message_timestamp"], utc=True, errors="coerce")
    elif "created_at" in df.columns:
        df["message_timestamp"] = pd.to_datetime(df["created_at"], utc=True, errors="coerce")

    # —Å—Ç–∞—Ç—É—Å–∏/—Å–∫–æ—Ä–∏
    df["manual_status"]       = df.get("manual_status", pd.Series(dtype=str)).fillna("N/A").astype(str).str.lower()
    df["ai_stage_one_status"] = df.get("ai_stage_one_status", pd.Series(dtype=str)).fillna("N/A").astype(str)
    df["ai_stage_two_status"] = df.get("ai_stage_two_status", pd.Series(dtype=str)).fillna("N/A").astype(str)
    df["ai_stage_two_score"]  = pd.to_numeric(df.get("ai_stage_two_score", 0.0), errors="coerce").fillna(0.0)

    # —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–ª—è
    for c in ["server_name", "channel_name", "author_name", "bot_user_name",
              "message_content", "message_url", "keyword_trigger"]:
        df[c] = df[c].fillna("").astype(str)

    return df


@st.cache_data(show_spinner=False)
def load_data(db_url: str, db_signature: tuple) -> pd.DataFrame:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î DataFrame –∑ opportunities + –Ω–∞–∑–≤–∏ –±–æ—Ç—ñ–≤/—Å–µ—Ä–≤–µ—Ä—ñ–≤/–∫–∞–Ω–∞–ª—ñ–≤/–∞–≤—Ç–æ—Ä—ñ–≤.
    –î–∂–µ—Ä–µ–ª–æ: settings.database.db_url (sqlite).
    –ù—ñ–∫–æ–ª–∏ –Ω–µ –∫–∏–¥–∞—î KeyError: –ø–æ–≤–µ—Ä—Ç–∞—î DF –∑ –ø–æ–≤–Ω–æ—é –æ—á—ñ–∫—É–≤–∞–Ω–æ—é —Å—Ö–µ–º–æ—é.
    """
    # --- 1) –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ URL —ñ —Ñ–∞–π–ª –ë–î ---
    db_url_raw = getattr(getattr(settings, "database", object()), "db_url", None)
    if not db_url_raw:
        st.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω–æ settings.database.db_url.")
        return _empty_df()

    try:
        url = make_url(db_url_raw)
    except Exception as e:
        st.error(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π database.db_url: {e}")
        return _empty_df()

    url = make_url(db_url)
    if url.drivername != "sqlite":
        raise RuntimeError("–ü–æ–∫–∏ —â–æ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ sqlite")

    db_path = url.database
    if not db_path:
        st.error("‚ùå –£ sqlite URL –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ë–î.")
        return _empty_df()

    db_file = Path(db_path if Path(db_path).is_absolute()
                   else (Path(__file__).resolve().parents[2] / db_path)).resolve()

    if not db_file.exists():
        st.error(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {db_file}")
        return _empty_df()

    st.caption(f"üîå DB: `{db_file}`")

    # --- 2) –ß–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç–∞–±–ª–∏—Ü—è? ---
    engine = create_engine(db_url)
    try:
        with engine.connect() as conn:
            exists = conn.execute(
                text("SELECT 1 FROM sqlite_master WHERE type='table' AND name='opportunities' LIMIT 1")
            ).fetchone()
            if not exists:
                st.info("‚ÑπÔ∏è –£ –ë–î –Ω–µ–º–∞—î —Ç–∞–±–ª–∏—Ü—ñ 'opportunities'.")
                return _empty_df()
    except Exception as e:
        st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î: {e}")
        return _empty_df()

    # --- 3) –û—Å–Ω–æ–≤–Ω–∏–π –∑–∞–ø–∏—Ç ---
    query = """
        SELECT
            opp.*,
            acc.name  AS bot_user_name,
            srv.name  AS server_name,
            chn.name  AS channel_name,
            auth.name AS author_name
        FROM opportunities AS opp
        LEFT JOIN discordaccount AS acc ON opp.discovered_by_id = acc.id
        LEFT JOIN server         AS srv ON opp.server_id = srv.id
        LEFT JOIN channel        AS chn ON opp.channel_id = chn.id
        LEFT JOIN author         AS auth ON opp.author_id = auth.id
    """

    try:
        with engine.connect() as conn:
            df = pd.read_sql_query(text(query), conn)
    except Exception as e:
        st.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ SELECT: {e}")
        return _empty_df()

    # --- 4) –ü–æ—Ä–æ–∂–Ω—è —Ç–∞–±–ª–∏—Ü—è? –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—Ö–µ–º—É ---
    if df.empty:
        st.info("‚ÑπÔ∏è –£ 'opportunities' –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
        return _ensure_columns(_empty_df())

    # --- 5) –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ –≥–∞—Ä–∞–Ω—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ ---
    df = _ensure_columns(df)

    st.caption(f"üì¶ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ä—è–¥–∫—ñ–≤: {len(df)}")
    return df
