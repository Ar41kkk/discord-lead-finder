import streamlit as st
from ..constants import AI_QUALIFIED_STATUSES


def display_tab(df):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω—É –≤–∫–ª–∞–¥–∫—É –∑ –∫–ª—é—á–æ–≤–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏."""
    st.subheader("üìä –ö–ª—é—á–æ–≤—ñ –ü–æ–∫–∞–∑–Ω–∏–∫–∏")

    if df.empty:
        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.")
        return

    # --- 1. –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—Å—ñ—Ö –º–µ—Ç—Ä–∏–∫ ---
    total_opportunities = len(df)
    keyword_triggers = df['keyword_trigger'].notna().sum()

    ai_qualified_df = df[df['ai_stage_two_status'].isin(AI_QUALIFIED_STATUSES)]
    ai_qualified_count = len(ai_qualified_df)

    manual_approved_count = len(df[df['manual_status'] == 'approved'])

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
    keyword_conversion = (ai_qualified_count / keyword_triggers) * 100 if keyword_triggers > 0 else 0
    manual_conversion = (manual_approved_count / ai_qualified_count) * 100 if ai_qualified_count > 0 else 0

    # --- 2. –ü–æ–∫—Ä–∞—â–µ–Ω–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (UI/UX) ---
    st.markdown("##### –ó–∞–≥–∞–ª—å–Ω–∞ –í–æ—Ä–æ–Ω–∫–∞")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–í—Å—å–æ–≥–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π", total_opportunities)
    col2.metric("–°–ø—Ä–∞—Ü—é–≤–∞–ª–æ –∑–∞ –∫–ª—é—á–µ–º", keyword_triggers)
    col3.metric("–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ AI (–ï—Ç–∞–ø 2)", ai_qualified_count)
    col4.metric("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –í—Ä—É—á–Ω—É", manual_approved_count)

    st.divider()

    st.markdown("##### –ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    kpi1, kpi2 = st.columns(2)
    kpi1.metric(
        "–ö–æ–Ω–≤–µ—Ä—Å—ñ—è –∑ –ö–ª—é—á–æ–≤–æ–≥–æ –°–ª–æ–≤–∞ –≤ AI –õ—ñ–¥–∞",
        f"{keyword_conversion:.1f}%",
        help="–Ø–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, AI –≤–≤–∞–∂–∞—î —è–∫—ñ—Å–Ω–∏–º–∏ –ª—ñ–¥–∞–º–∏."
    )
    kpi2.metric(
        "–ö–æ–Ω–≤–µ—Ä—Å—ñ—è –∑ AI –õ—ñ–¥–∞ –≤ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ",
        f"{manual_conversion:.1f}%",
        help="–Ø–∫–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –ª—ñ–¥—ñ–≤, –∫–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö AI, –≤–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—Ä—É—á–Ω—É."
    )

    st.divider()

    # --- 3. –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è ---
    st.subheader("–ù–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ –ö–ª—é—á–æ–≤—ñ –°–ª–æ–≤–∞")
    top_keywords = df.dropna(subset=['keyword_trigger'])['keyword_trigger'].value_counts().nlargest(5)
    if not top_keywords.empty:
        st.table(top_keywords)
    else:
        st.info("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö.")