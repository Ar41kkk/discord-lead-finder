# src/dashboard/pages/page_bot_control.py

import streamlit as st
import os
import subprocess
import psutil
from pathlib import Path
import sys
from streamlit_autorefresh import st_autorefresh

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ 'src' –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É
sys.path.append(str(Path(__file__).resolve().parent.parent.parent))
from src.utils import get_project_root

# --- –®–ª—è—Ö–∏ ---
PROJECT_ROOT = get_project_root()
PID_FILE = PROJECT_ROOT / ".bot.pid"
VENV_PYTHON = sys.executable
CLI_SCRIPT = PROJECT_ROOT / "src" / "interface" / "cli.py"
LOG_FILE = PROJECT_ROOT / "logs" / "app.log"


def get_bot_status():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑–∞ PID —Ñ–∞–π–ª–æ–º."""
    if not PID_FILE.exists():
        return {"status": "Stopped", "pid": None}

    try:
        with open(PID_FILE, "r") as f:
            pid = int(f.read().strip())

        if psutil.pid_exists(pid):
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ—Ü–µ—Å –∑ —Ü–∏–º PID –¥—ñ–π—Å–Ω–æ —î –Ω–∞—à–∏–º –±–æ—Ç–æ–º
            proc = psutil.Process(pid)
            # –¶—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ —ñ–¥–µ–∞–ª—å–Ω–æ—é, –∞–ª–µ –∑–Ω–∞—á–Ω–æ –ø—ñ–¥–≤–∏—â—É—î –Ω–∞–¥—ñ–π–Ω—ñ—Å—Ç—å
            if 'python' in proc.name().lower() and any('cli.py' in cmd for cmd in proc.cmdline()):
                return {"status": "Running", "pid": pid}
    except (psutil.NoSuchProcess, ValueError, IOError):
        # –Ø–∫—â–æ –ø—Ä–æ—Ü–µ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–æ, –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏–π PID —Ñ–∞–π–ª
        PID_FILE.unlink(missing_ok=True)

    return {"status": "Stopped", "pid": None}


def display_page():
    st_autorefresh(interval=5000, key="bot_control_refresher")
    st.header("ü§ñ –ö–µ—Ä—É–≤–∞–Ω–Ω—è Live-–ë–æ—Ç–æ–º", divider='rainbow')

    status_info = get_bot_status()
    status = status_info["status"]
    pid = status_info["pid"]

    if status == "Running":
        st.success(f"**–°—Ç–∞—Ç—É—Å:** –ü—Ä–∞—Ü—é—î ‚úÖ (PID: {pid})")
    else:
        st.info("**–°—Ç–∞—Ç—É—Å:** –ó—É–ø–∏–Ω–µ–Ω–æ ‚ùå")

    col1, col2, _ = st.columns([1, 1, 4])
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏", disabled=(status == "Running"), use_container_width=True):
            try:
                creation_flags = 0
                if sys.platform == "win32":
                    creation_flags = subprocess.CREATE_NO_WINDOW

                env = os.environ.copy()
                subprocess.Popen(
                    [str(VENV_PYTHON), str(CLI_SCRIPT), "live"],
                    cwd=PROJECT_ROOT, env=env, creationflags=creation_flags
                )
                st.toast("–ö–æ–º–∞–Ω–¥—É –Ω–∞ –∑–∞–ø—É—Å–∫ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                st.rerun()
            except Exception as e:
                st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞: {e}")

    with col2:
        if st.button("üõë –ó—É–ø–∏–Ω–∏—Ç–∏", disabled=(status != "Running"), use_container_width=True):
            if pid and psutil.pid_exists(pid):
                try:
                    p = psutil.Process(pid)
                    p.terminate()  # –ú'—è–∫–∞ –∑—É–ø–∏–Ω–∫–∞
                    p.wait(timeout=5)  # –ß–µ–∫–∞—î–º–æ –¥–æ 5 —Å–µ–∫—É–Ω–¥
                    st.toast(f"–ü—Ä–æ—Ü–µ—Å –±–æ—Ç–∞ (PID: {pid}) —É—Å–ø—ñ—à–Ω–æ –∑—É–ø–∏–Ω–µ–Ω–æ.")
                except psutil.TimeoutExpired:
                    p.kill()  # –ü—Ä–∏–º—É—Å–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞, —è–∫—â–æ –º'—è–∫–∞ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞
                    st.toast(f"–ü—Ä–æ—Ü–µ—Å –±–æ—Ç–∞ (PID: {pid}) –∑—É–ø–∏–Ω–µ–Ω–æ –ø—Ä–∏–º—É—Å–æ–≤–æ.")
                except psutil.NoSuchProcess:
                    pass  # –ü—Ä–æ—Ü–µ—Å –≤–∂–µ –Ω–µ —ñ—Å–Ω—É—î

                if PID_FILE.exists():
                    PID_FILE.unlink(missing_ok=True)
            st.rerun()

    st.divider()
    st.subheader("–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª—ñ")
    if LOG_FILE.exists():
        try:
            # –û—á–∏—â—É—î–º–æ –∫–µ—à —Ñ–∞–π–ª—É, —â–æ–± –∑–∞–≤–∂–¥–∏ —á–∏—Ç–∞—Ç–∏ —Å–≤—ñ–∂—É –≤–µ—Ä—Å—ñ—é
            os.stat(LOG_FILE)
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                lines = f.readlines()
                st.code("".join(lines[-100:]), language="log")
        except Exception as e:
            st.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª: {e}")
    else:
        st.info("–õ–æ–≥-—Ñ–∞–π–ª —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
