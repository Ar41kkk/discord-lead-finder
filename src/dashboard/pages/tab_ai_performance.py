# src/dashboard/pages/tab_ai_performance.py

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from ..constants import AI_QUALIFIED_STATUSES, MANUAL_APPROVED_STATUS

def display_tab(df: pd.DataFrame):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI –∑ –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫."""
    st.header("üß† –ê–Ω–∞–ª—ñ–∑ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI-–∞–≥–µ–Ω—Ç–∞")

    if df is None or df.empty:
        st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
        return

    # ---- –ë–µ–∑–ø–µ—á–Ω—ñ –¥–æ—Å—Ç—É–ø–∏ –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    s2_status = df.get("ai_stage_two_status")
    s2_score  = df.get("ai_stage_two_score")
    manual    = df.get("manual_status")

    # ---- –ë–ª–æ–∫ 1: –†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–∞—Ç—É—Å—ñ–≤ (–ï—Ç–∞–ø 2)
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–∞—Ç—É—Å—ñ–≤ –≤—ñ–¥ AI (–ï—Ç–∞–ø 2)")
        if s2_status is None:
            st.warning("–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'ai_stage_two_status' —É –¥–∞–Ω–∏—Ö.")
        else:
            s2_clean = s2_status.astype(str).fillna("N/A")
            status_counts = s2_clean[s2_clean.ne("N/A")].value_counts()
            if not status_counts.empty:
                fig_status_pie = px.pie(values=status_counts.values, names=status_counts.index,
                                        title="AI Stage 2 ‚Äî —Ä–æ–∑–ø–æ–¥—ñ–ª –≤–µ—Ä–¥–∏–∫—Ç—ñ–≤")
                st.plotly_chart(fig_status_pie, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –¥—ñ–∞–≥—Ä–∞–º–∏.")

    # ---- –ë–ª–æ–∫ 2: –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ score (–ï—Ç–∞–ø 2)
    with col2:
        st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ AI (Score, –ï—Ç–∞–ø 2)")
        if s2_score is None:
            st.warning("–í—ñ–¥—Å—É—Ç–Ω—è –∫–æ–ª–æ–Ω–∫–∞ 'ai_stage_two_score' —É –¥–∞–Ω–∏—Ö.")
        else:
            scores = pd.to_numeric(s2_score, errors="coerce")
            score_df = df.assign(ai_stage_two_score=scores)
            score_df = score_df[score_df["ai_stage_two_score"].notna() & (score_df["ai_stage_two_score"] > 0)]
            if not score_df.empty:
                fig_score_hist = px.histogram(score_df, x="ai_stage_two_score", nbins=20,
                                              title="–ß–∞—Å—Ç–æ—Ç–∞ score –≤—ñ–¥ 0.0 –¥–æ 1.0")
                st.plotly_chart(fig_score_hist, use_container_width=True)
            else:
                st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö score –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏.")

    st.markdown("---")
    st.subheader("–ú–∞—Ç—Ä–∏—Ü—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Ç–∞ –ú–µ—Ç—Ä–∏–∫–∏ –Ø–∫–æ—Å—Ç—ñ")

    # –î–ª—è –º–∞—Ç—Ä–∏—Ü—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ: —Ä—É—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è —Ç–∞ —Ä—ñ—à–µ–Ω–Ω—è AI (–ï—Ç–∞–ø 2)
    if (s2_status is None) or (manual is None):
        st.warning("–ü–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏ 'ai_stage_two_status' —Ç–∞ 'manual_status' –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫.")
        return

    work = df.copy()
    work["manual_status"] = manual.astype(str).str.lower().fillna("n/a")
    work["ai_stage_two_status"] = s2_status.astype(str).fillna("N/A")

    # –¢—ñ–ª—å–∫–∏ –¥–µ —î —Ä—É—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ (approved / rejected)
    analysis_df = work[work["manual_status"].isin([MANUAL_APPROVED_STATUS, "rejected"])].copy()
    if analysis_df.empty:
        st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∑ —Ä—É—á–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é ('approved'/'rejected').")
        return

    analysis_df["ai_decision"] = analysis_df["ai_stage_two_status"].apply(
        lambda x: "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ" if x in AI_QUALIFIED_STATUSES else "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    )
    analysis_df["manual_decision"] = analysis_df["manual_status"].apply(
        lambda x: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" if x == MANUAL_APPROVED_STATUS else "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"
    )

    cm = pd.crosstab(analysis_df["manual_decision"], analysis_df["ai_decision"],
                     rownames=["–†—ñ—à–µ–Ω–Ω—è –ª—é–¥–∏–Ω–∏"], colnames=["–†—ñ—à–µ–Ω–Ω—è AI"])

    # –û–±—á–∏—Å–ª—é—î–º–æ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞—Ö–∏—â–µ–Ω–æ
    tp = cm.loc["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ"] if ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" in cm.index and "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ" in cm.columns) else 0
    fp = cm.loc["–í—ñ–¥—Ö–∏–ª–µ–Ω–æ", "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ"]     if ("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" in cm.index and "–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ" in cm.columns) else 0
    fn = cm.loc["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ", "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ"]      if ("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ" in cm.index and "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ" in cm.columns) else 0

    precision = tp / (tp + fp) if (tp + fp) else 0.0
    recall    = tp / (tp + fn) if (tp + fn) else 0.0
    f1_score  = (2 * precision * recall / (precision + recall)) if (precision + recall) else 0.0

    col_matrix, col_metrics = st.columns(2)
    with col_matrix:
        if cm.empty:
            st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ñ.")
        else:
            fig_conf_matrix = go.Figure(data=go.Heatmap(
                z=cm.values, x=cm.columns, y=cm.index,
                hoverongaps=False, colorscale='Blues', text=cm.values, texttemplate="%{text}"
            ))
            fig_conf_matrix.update_layout(title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ—à–µ–Ω—å (–ª—é–¥–∏–Ω–∞ vs AI)")
            st.plotly_chart(fig_conf_matrix, use_container_width=True)

    with col_metrics:
        st.subheader("–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ AI")
        st.metric(label="–¢–æ—á–Ω—ñ—Å—Ç—å (Precision)", value=f"{precision:.2%}")
        st.metric(label="–ü–æ–≤–Ω–æ—Ç–∞ (Recall)",    value=f"{recall:.2%}")
        st.metric(label="F1-Score",            value=f"{f1_score:.2%}")
