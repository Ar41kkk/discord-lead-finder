# src/dashboard/pages/tab_ai_performance.py

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from ..constants import AI_QUALIFIED_STATUSES, MANUAL_APPROVED_STATUS

def display_tab(df):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≤–∫–ª–∞–¥–∫—É –∞–Ω–∞–ª—ñ–∑—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI."""
    st.header("üß† –ê–Ω–∞–ª—ñ–∑ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ AI-–∞–≥–µ–Ω—Ç–∞")

    col1, col2 = st.columns(2)
    # ... (–∫–æ–¥ –¥–ª—è –∫—Ä—É–≥–æ–≤–æ—ó –¥—ñ–∞–≥—Ä–∞–º–∏ —Ç–∞ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    with col1:
        st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª —Å—Ç–∞—Ç—É—Å—ñ–≤ –≤—ñ–¥ AI")
        status_counts = df['ai_status'].value_counts()
        fig_status_pie = px.pie(values=status_counts.values, names=status_counts.index, color_discrete_sequence=px.colors.sequential.RdBu)
        st.plotly_chart(fig_status_pie, use_container_width=True)
    with col2:
        st.subheader("–†–æ–∑–ø–æ–¥—ñ–ª –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ AI (Score)")
        fig_score_hist = px.histogram(df, x="ai_score", nbins=20, title="–ß–∞—Å—Ç–æ—Ç–∞ score –≤—ñ–¥ 0.0 –¥–æ 1.0")
        st.plotly_chart(fig_score_hist, use_container_width=True)

    st.markdown("---")
    st.subheader("–ú–∞—Ç—Ä–∏—Ü—è –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π —Ç–∞ –ú–µ—Ç—Ä–∏–∫–∏ –Ø–∫–æ—Å—Ç—ñ")

    analysis_df = df[df['manual_status'].isin([MANUAL_APPROVED_STATUS, 'rejected'])].copy() # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, –¥–µ —î —Ä—É—á–Ω–∞ –æ—Ü—ñ–Ω–∫–∞

    if analysis_df.empty:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –∑ —Ä—É—á–Ω–æ—é –æ—Ü—ñ–Ω–∫–æ—é ('approved'/'rejected') –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –º–∞—Ç—Ä–∏—Ü—ñ —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –º–µ—Ç—Ä–∏–∫.")
        return

    analysis_df['ai_decision'] = analysis_df['ai_status'].apply(lambda x: '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ' if x in AI_QUALIFIED_STATUSES else '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ')
    analysis_df['manual_decision'] = analysis_df['manual_status'].apply(lambda x: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' if x == MANUAL_APPROVED_STATUS else '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ')

    confusion_matrix = pd.crosstab(analysis_df['manual_decision'], analysis_df['ai_decision'], rownames=['–†—ñ—à–µ–Ω–Ω—è –ª—é–¥–∏–Ω–∏'], colnames=['–†—ñ—à–µ–Ω–Ω—è AI'])

    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–µ—Ç—Ä–∏–∫
    tp = confusion_matrix.loc['–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ'] if ('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' in confusion_matrix.index and '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ' in confusion_matrix.columns) else 0
    fp = confusion_matrix.loc['–í—ñ–¥—Ö–∏–ª–µ–Ω–æ', '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ'] if ('–í—ñ–¥—Ö–∏–ª–µ–Ω–æ' in confusion_matrix.index and '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ' in confusion_matrix.columns) else 0
    fn = confusion_matrix.loc['–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ'] if ('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' in confusion_matrix.index and '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ' in confusion_matrix.columns) else 0

    precision = tp / (tp + fp) if (tp + fp) > 0 else 0
    recall = tp / (tp + fn) if (tp + fn) > 0 else 0
    f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    col_matrix, col_metrics = st.columns(2)
    with col_matrix:
        fig_conf_matrix = go.Figure(data=go.Heatmap(
            z=confusion_matrix.values, x=confusion_matrix.columns, y=confusion_matrix.index,
            hoverongaps=False, colorscale='Blues', text=confusion_matrix.values, texttemplate="%{text}"
        ))
        fig_conf_matrix.update_layout(title="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ä—ñ—à–µ–Ω—å")
        st.plotly_chart(fig_conf_matrix, use_container_width=True)

    with col_metrics:
        st.subheader("–û—Ü—ñ–Ω–∫–∞ —è–∫–æ—Å—Ç—ñ AI")
        st.metric(label="–¢–æ—á–Ω—ñ—Å—Ç—å (Precision)", value=f"{precision:.2%}",
                  help="–ß–∞—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏–∑–Ω–∞—á–µ–Ω–∏—Ö –ª—ñ–¥—ñ–≤ —Å–µ—Ä–µ–¥ —É—Å—ñ—Ö, —â–æ AI –Ω–∞–∑–≤–∞–≤ –ª—ñ–¥–∞–º–∏. –ü–æ–∫–∞–∑—É—î, –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–≤—ñ—Ä—è—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –≤–µ—Ä–¥–∏–∫—Ç–∞–º AI.")
        st.metric(label="–ü–æ–≤–Ω–æ—Ç–∞ (Recall)", value=f"{recall:.2%}",
                  help="–ß–∞—Å—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–∏—Ö –ª—ñ–¥—ñ–≤, —è–∫—É AI –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏. –ü–æ–∫–∞–∑—É—î, —Å–∫—ñ–ª—å–∫–∏ –ª—ñ–¥—ñ–≤ –º–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
        st.metric(label="F1-Score", value=f"{f1_score:.2f}",
                  help="–ë–∞–ª–∞–Ω—Å –º—ñ–∂ –¢–æ—á–Ω—ñ—Å—Ç—é —Ç–∞ –ü–æ–≤–Ω–æ—Ç–æ—é.")