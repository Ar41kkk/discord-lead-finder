# src/dashboard/pages/triage_views/view_deck.py

import streamlit as st
import pandas as pd
import time
from ...db_utils import update_opportunity_status
from config.settings import settings
from sqlalchemy.engine import make_url

def display_view(df: pd.DataFrame):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∂–∏–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è '–ö–æ–ª–æ–¥–∞'."""

    # –æ—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ sqlite-—Ñ–∞–π–ª—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    url = make_url(settings.database.db_url)
    if url.drivername != "sqlite":
        raise RuntimeError("–ü—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –ª–∏—à–µ sqlite –¥–ª—è triage_views")
    db_path = url.database

    # –û–±—Ä–æ–±–Ω–∏–∫ –æ–¥–Ω—ñ—î—ó –¥—ñ—ó
    def handle_action(status: str, opp_id: int):
        st.session_state.last_action = {
            "id": opp_id,
            "previous_status": "n/a",
            "timestamp": time.time()
        }
        if update_opportunity_status(db_path, opp_id, status):
            st.toast(f"–õ—ñ–¥ #{opp_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ '{status}'!", icon="‚úÖ")
            st.cache_data.clear()
        else:
            st.toast(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ª—ñ–¥–∞ #{opp_id}.", icon="‚ùå")

    # –°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –¥—ñ—ó
    def handle_undo():
        last = st.session_state.get("last_action")
        if last and update_opportunity_status(db_path, last["id"], last["previous_status"]):
            st.toast(f"–î—ñ—é –¥–ª—è –ª—ñ–¥–∞ #{last['id']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", icon="‚Ü©Ô∏è")
            st.session_state.last_action = None
            st.cache_data.clear()
        else:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é.")

    # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –ª—ñ–¥
    current = df.iloc[0]
    opp_id = current["id"]

    # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–∞—Ä—Ç–∫—É
    with st.container():
        st.markdown(
            f"**–°–µ—Ä–≤–µ—Ä:** `{current['server_name']}` | "
            f"**–ö–∞–Ω–∞–ª:** `{current['channel_name']}`"
        )
        st.divider()
        left, right = st.columns([3, 1])
        with left:
            st.markdown(f"**–ê–≤—Ç–æ—Ä:** {current['author_name']}")
            st.markdown(f"**–ê–∫–∞—É–Ω—Ç:** {current['bot_user_name']}")
            if pd.notna(current["keyword_trigger"]):
                st.markdown(f"**–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:** `{current['keyword_trigger']}`")
            st.markdown(f"> {current['message_content']}")
            st.link_button("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", current["message_url"])
        with right:
            st.metric("AI Score (–ï—Ç–∞–ø 2)", f"{current['ai_stage_two_score']:.0%}")
            st.info(f"**–°—Ç–∞—Ç—É—Å AI (–ï—Ç–∞–ø 1):** {current['ai_stage_one_status']}")
            st.info(f"**–°—Ç–∞—Ç—É—Å AI (–ï—Ç–∞–ø 2):** {current['ai_stage_two_status']}")

    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫—É Undo —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    if st.session_state.get("last_action") and time.time() - st.session_state.last_action["timestamp"] > 10:
        st.session_state.last_action = None

    # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
    c1, c2, c3 = st.columns([2,2,3])
    with c1:
        st.button("‚ùå Reject", use_container_width=True,
                  on_click=handle_action, args=("rejected", opp_id))
    with c2:
        st.button("‚úÖ Approve", use_container_width=True, type="primary",
                  on_click=handle_action, args=("approved", opp_id))
    with c3:
        if st.session_state.get("last_action"):
            st.button("‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é", use_container_width=True,
                      on_click=handle_undo)
