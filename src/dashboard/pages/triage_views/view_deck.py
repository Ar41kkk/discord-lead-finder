# src/dashboard/pages/triage_views/view_deck.py

import streamlit as st
import pandas as pd
import time
from ...db_utils import update_opportunity_status


def display_view(df, db_path):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∂–∏–º —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è '–ö–æ–ª–æ–¥–∞'."""

    # --- –§—É–Ω–∫—Ü—ñ—ó-–æ–±—Ä–æ–±–Ω–∏–∫–∏ ---
    def handle_action(status, opp_id):
        st.session_state.last_action = {"id": opp_id, "previous_status": "n/a", "timestamp": time.time()}
        if update_opportunity_status(db_path, opp_id, status):
            st.toast(f"–õ—ñ–¥ #{opp_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ '{status}'!", icon="‚úÖ")
            st.cache_data.clear()
        else:
            st.toast(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –ª—ñ–¥–∞ #{opp_id}.", icon="‚ùå")

    def handle_undo(db_path):
        last_action = st.session_state.get('last_action')
        if last_action and update_opportunity_status(db_path, last_action["id"], last_action["previous_status"]):
            st.toast(f"–î—ñ—é –¥–ª—è –ª—ñ–¥–∞ #{last_action['id']} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", icon="‚Ü©Ô∏è")
            st.session_state.last_action = None
            st.cache_data.clear()
        else:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é.")

    current_lead = df.iloc[0]
    opp_id = current_lead['id']

    # --- –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ ---
    with st.container(border=True):
        # ... (–∫–æ–¥ –∫–∞—Ä—Ç–∫–∏ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –º–∞–π–∂–µ –±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ —Ç–µ–ø–µ—Ä –≤—ñ–Ω —ñ–∑–æ–ª—å–æ–≤–∞–Ω–∏–π)
        st.markdown(f"""...""")  # HTML for card header
        st.divider()
        col_main, col_ai = st.columns([3, 1])
        with col_main:
            st.markdown(f"**–ê–≤—Ç–æ—Ä:** {current_lead['author_name']}")
            st.markdown(f"**–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:** `{current_lead['keyword_trigger']}`" if pd.notna(
                current_lead['keyword_trigger']) else "")
            st.markdown(f"<blockquote>{current_lead['message_content']}</blockquote>", unsafe_allow_html=True)
            st.link_button("üîó –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", current_lead['message_url'])
        with col_ai:
            st.metric("AI Score", f"{current_lead['ai_score']:.0%}")
            st.info(f"**–°—Ç–∞—Ç—É—Å AI:**\n{current_lead['ai_status']}")

    st.write("")
    if st.session_state.get('last_action') and time.time() - st.session_state.last_action['timestamp'] > 10:
        st.session_state.last_action = None

    action_col1, action_col2, action_col3 = st.columns([2, 2, 3])
    with action_col1:
        st.button("‚ùå Reject", use_container_width=True, on_click=handle_action, args=('rejected', opp_id))
    with action_col2:
        st.button("‚úÖ Approve", use_container_width=True, type="primary", on_click=handle_action,
                  args=('approved', opp_id))
    with action_col3:
        if st.session_state.get('last_action'):
            st.button("‚Ü©Ô∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –¥—ñ—é", use_container_width=True, on_click=handle_undo, args=(db_path,))